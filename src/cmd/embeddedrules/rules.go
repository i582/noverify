// Code generated for package embeddedrules by go-bindata DO NOT EDIT. (@generated)
// sources:
// embeddedrules/rules.php
package embeddedrules

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _embeddedrulesRulesPhp = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x99\x5b\x6f\xe3\x36\x16\xc7\xdf\x03\xe4\x3b\x1c\x07\x9a\x8c\x9d\xfa\x32\x83\x2e\xb0\xc0\x24\x4e\xba\xdb\x97\x5d\x60\xb0\x53\xb4\xe8\xd3\x20\xe3\x50\xd2\x91\xc5\x46\x26\xb5\x24\x95\x58\x1b\xe7\xbb\x2f\x48\xca\xb2\x2c\xd1\xba\xcc\x74\x80\x16\x68\xc6\xe6\xe5\xfc\xfe\x3c\xe7\xf0\xea\x9b\xbb\x34\x4e\xcf\xcf\xce\xcf\x16\x57\x57\xe7\x67\x70\x05\x3f\x31\x4e\x99\x4c\x31\x50\x94\x33\xf8\xc7\xc7\x8f\xb6\x34\xa1\x4c\xa1\x00\xfb\x5f\x48\x25\xf1\x13\xd4\x35\x8b\xa3\xbe\x01\xdf\x6c\x90\x29\xf8\x15\x53\x2e\x14\x28\x14\x8c\x88\x1c\x70\x9b\x0a\x94\x92\x72\x26\x41\xc5\x44\x41\x40\x18\xf8\x08\x92\x6e\xd2\x84\x46\x14\xc3\xb9\xed\xef\x63\xc4\x05\x02\x78\x5b\xb8\xd3\x7f\x3e\x80\x97\xdb\x1a\x12\x59\xbc\xae\xd9\x97\x2e\xce\xcf\xa2\x8c\x59\xa1\x05\xea\x37\x6b\x31\x1f\x4f\xe0\xe5\xfc\x0c\xc0\x2a\x03\x6d\x61\x43\x72\x1f\x21\xe0\x59\x12\x82\xc0\x34\x21\x01\x82\x8a\xb1\x14\xf9\x4c\x55\x0c\x7f\x64\x52\x81\x17\x70\x16\xee\xbb\xa9\x3c\x45\xf0\x39\x4f\xaa\xc5\x0b\xfd\x8f\xf9\x0e\x77\xa0\x44\x86\xf0\x01\x22\x92\x48\xbc\xd6\xee\x68\xc1\x3e\x0b\xaa\x10\x88\x84\x87\xb1\xb6\x39\x31\x36\x1e\x8e\x58\x30\xfa\x0e\xb4\xbd\xdb\x4a\x54\x44\xb7\x55\x5f\x9a\xb2\x34\x13\x08\xde\xb6\x0a\xad\xc4\x61\x18\xec\xce\x05\xbb\x2b\x61\xc6\x3a\x95\x12\xd5\xd8\xdb\x4e\x8e\x20\xaf\x6d\x19\x95\x72\x85\x4c\x51\x92\x00\x4f\x51\x10\x13\xfa\x54\x60\x80\x21\xb2\x00\xb5\xc5\x0c\x65\x33\x99\x2e\xc1\xdb\x10\xf9\x08\xcb\x25\xbc\xbb\x86\xc5\x42\x7f\x88\x89\x84\x98\xae\x63\x14\x55\x0b\x2a\x26\x0c\x2e\x8f\x73\x6e\x7c\xb0\x30\x31\x26\xea\xc9\x77\xe8\x5f\xe6\xdd\x02\xfe\xc3\x15\x7e\x80\x67\xd4\xc9\xa6\xa5\x3f\x54\x74\x8c\x96\xda\x3d\xda\x59\xa4\x21\x1f\xf0\x09\x59\x61\x83\x46\x40\xcb\xd9\x12\x90\x6c\x1d\x2b\x9b\xa7\x0f\x3a\x55\x82\x18\x83\xc7\x4f\xe9\x43\x31\xa7\xf4\x37\x09\x3e\x57\xb1\x75\x8e\x4d\x9f\xc5\x02\x74\x5b\x09\x26\xe1\x80\x4a\x60\x5c\x01\x81\x35\xe7\xe1\xbe\x1d\x44\x5c\x80\x4f\xd5\x33\x95\x78\x70\xec\x64\x6e\xfb\x17\x56\x6c\x04\x28\x5b\xc3\x03\x65\x4f\x24\xa1\xa1\x35\x3c\xd5\xd3\x1b\x03\x85\x21\xb0\x6c\xe3\xa3\x80\x88\x67\x2c\x34\x73\xe6\x01\xa8\x2c\xba\x6b\xaa\xd1\x19\x63\x92\x46\x59\x32\x05\x1f\x03\x92\x49\x3b\x09\x05\xe7\x0a\x78\x64\x3e\xa7\x82\xfb\x09\x6e\xb4\xd4\x83\x6f\x0a\x2d\xf0\xef\x2a\x1a\x88\x40\x20\x20\x50\x66\x49\xd1\x9d\xa8\x79\x99\xa7\xf0\xd3\x33\x11\x4c\x2b\xee\x08\x77\x91\x8f\x84\xe5\x2b\xfc\xef\xca\xa7\x8a\xb0\xf0\x83\x0d\x24\x80\xb7\xd2\xdd\xbd\x95\x0e\xde\xea\xba\x2c\xbb\x2c\x2b\x4c\xd9\x6b\x83\x39\xea\xcd\x64\x4e\xe8\xe8\x14\x74\xd4\x02\x5d\x0e\x19\xe9\x8f\xce\xa1\x9e\x1e\x6b\xeb\x60\x87\x8c\xd6\x05\x1e\x9d\x04\x8f\x8e\xc0\x03\x63\xbb\x6b\xc4\x96\x8b\x66\x68\x77\x47\xd4\xdd\xb7\x85\x76\xd7\x0c\xed\x31\x73\x74\x8a\xf9\x0d\x91\xdd\x35\x23\x5b\x1f\xe8\xe9\x91\x7e\x7d\x60\x77\x8e\xc0\xd6\x07\x7b\x7a\xb4\x1d\x71\x6d\x25\xdf\xdd\xed\xf7\xa8\x72\x6c\x7a\x7f\x59\x5d\x3b\x4c\x75\x0c\xa2\x6a\x6a\xd4\x61\x6a\x88\xa8\x0e\x4d\xfd\x25\xb5\x1a\xba\xed\x6b\xe7\xb6\xdd\x4c\x6f\x3d\xb7\xed\x7a\x6e\xfa\xda\xb9\x69\x37\xd3\x5b\xcf\xcd\x91\x9e\xd6\xe3\x03\x91\x92\xae\x99\x2e\xe9\x7f\x10\x5d\xea\x3f\x3f\xd8\xb3\x49\xed\x24\xfa\xc3\x72\x5f\x5c\x3d\x0d\x58\xc8\xa7\xb4\xf3\x0c\x7a\x74\x62\x32\xb6\xea\x27\x26\x53\xd8\x7a\x3c\xab\xaa\xeb\x0f\x9b\xb9\x60\xb3\x7e\xb0\xd9\x50\xd8\x95\x0b\x76\xd5\x0f\x76\x35\x14\xb6\x70\xc1\x16\xfd\x60\x8b\xa1\xb0\x37\x2e\xd8\x9b\x7e\xb0\x37\x43\x61\x97\x2e\xd8\x65\x3f\xd8\xe5\x50\xd8\xce\x05\xdb\xf5\x83\xed\x86\xc2\xbe\xb8\x60\x5f\xfa\xc1\xbe\x0c\x85\xdd\xdc\xb8\x68\xb6\xb4\x1b\x77\x73\x33\x94\x77\x7b\xeb\xe2\xd9\xd2\x6e\xde\xed\xed\x50\xde\xdc\x85\x9b\xf7\xa3\xcd\x87\x5f\xf3\x5c\x34\x5b\xda\x8d\x33\xf7\xc1\x01\x37\xbe\x28\x9a\xf9\xf9\x8c\x33\x84\x0d\x95\x8a\x3c\x36\x6f\x7a\xe4\x73\xc0\x33\xa6\xc6\x1e\x99\xdc\xd7\x56\xeb\x4a\xd5\xec\xfd\x7d\x7d\xcd\xe6\x51\xf4\xcf\xfc\xbd\x63\xc5\xde\x6f\x47\xfa\x52\x42\xfc\x24\x07\xca\x14\xb2\x10\x43\x50\x1c\xf4\xed\xc5\x58\x9d\xbd\x37\x77\x39\x06\x94\x85\xb8\xad\xba\x03\x6a\x6c\x98\x81\xa1\x97\xbe\xa8\x4a\x6e\xfa\xbe\x13\x2f\xe9\xff\x90\x47\x9d\x7c\xdb\xec\x84\x80\x43\xe5\x7d\x57\x34\x64\x26\x53\x1a\x50\x9e\xe9\xbb\xd7\x3a\xb3\x3b\x29\x17\x21\x8a\x5a\x28\xa4\x12\x29\x97\xe3\xb7\x8b\xb7\x53\xf0\xe4\xe4\x38\x18\x45\xa5\x27\xa7\xf0\x76\xf1\x76\xd2\xd8\x40\xc5\x5a\x7e\xd2\x36\xdb\xe2\xb1\x4f\x0b\xe3\x93\x80\x0b\x81\x81\x82\x98\xe4\x52\x91\xe0\x11\xf4\xa5\x96\x21\x86\x09\xd6\x75\x56\x86\xae\x0f\xad\xfb\x1e\x2b\xdb\xba\x3c\xb9\xee\x25\xbe\x5c\x04\x31\x11\x17\xaf\x53\xf0\x5e\x2e\xae\x2e\x5e\x27\xd7\x65\x3d\xed\x6a\xd0\x61\x21\xf3\xa5\x12\xab\x22\xfa\x2f\x17\x52\x35\x1a\xbd\x9e\xce\x07\xe7\xf0\x8b\x67\x2d\x13\x30\xed\x01\x99\xf9\x7f\xe8\xf2\xd3\x2e\x48\x05\xae\x57\x45\xb7\xb1\xb7\x9a\x82\xf9\xdf\x21\xe6\x6b\x74\x58\x0d\x4a\xe8\x86\xed\x51\xd0\x8e\x28\x3a\x55\x23\xe0\x52\x76\xd2\xdb\x8d\xc6\x17\x17\xdf\xe6\xcd\x10\x13\xba\xa1\x3a\x63\x7b\x8d\x03\xb7\x69\xc2\xc3\x02\xef\xd2\xd9\x77\x62\x65\x92\xac\x11\x78\xd4\x7c\x91\xa9\xaf\x77\x34\x82\xb1\x47\xe5\xef\xbf\x7e\xd4\x3b\xfc\x13\x0a\x1a\xe5\x13\x98\xcf\xe7\xc7\xd3\xad\xda\xac\xd9\xae\x3a\xf3\x0a\xe2\xa7\x54\xb6\x4c\xbd\xdf\x25\x86\x70\x59\x53\xc7\x05\xf0\x27\x14\xf6\xa5\xb4\x78\x56\x92\x53\x48\x51\xc4\x24\x95\x9a\x4b\x65\xb9\x78\xdd\xd5\x4f\x31\x97\x95\xfd\xa2\xf2\xe0\xba\x75\x94\xe5\xc7\x1b\x89\xfb\x64\x73\x24\x75\x37\x4c\xea\x6e\xd7\x26\x75\xb7\xfb\x6a\xa9\xbb\x1e\xbb\x5d\x40\x92\x64\xf8\x73\x39\x65\x2b\x22\x04\xc9\xc7\xde\xe3\x14\xcc\xa7\xd5\x23\xe6\x72\xec\xa9\x98\xca\xd9\x6d\x48\x14\x99\xd4\x96\xe0\xb2\xd5\x0a\xb7\x54\x2a\x69\xba\x56\xdb\xd7\x53\x43\x2b\xeb\x7c\x5d\xff\xd9\x1c\x12\x0a\x9d\xb9\xde\xa3\x1c\x1c\xcc\xa7\xe0\x19\x40\x65\x97\xea\x6a\x67\x1f\x8c\x0f\xe3\xd4\x95\xd5\x91\x92\x49\xe7\x14\x63\x5c\xcd\xf4\x2c\x0e\xd4\x0c\x19\xcf\xd6\x31\x04\x7c\x93\x12\x41\xa5\x63\x66\xed\x49\x17\xcf\x31\x51\x17\x8e\x3d\xcc\xd1\x62\x6a\x1e\xe7\x1b\x9e\xb3\xcc\x9f\x37\xe5\x85\xf0\xe0\xb8\xa3\x64\x65\x9c\x15\xfa\x2a\xc2\x60\xac\x77\xf9\xe5\x72\x39\xd9\x77\x58\xd8\x0f\xf6\xa1\x27\x23\x49\xb9\x60\x1e\x5e\xb4\xb4\x8c\xeb\x43\xa1\xf9\xc9\xe0\xf0\xd8\x52\x6d\xb9\xff\x19\x61\x5f\x6a\xbe\x9f\x68\xcb\xb2\x24\xa9\x14\xea\xaf\x47\x2d\x8b\xf5\xb5\x7b\x74\xc5\x52\xda\x36\xc8\x62\x1e\x15\x2d\x8b\xd9\xd5\x2c\xcf\x6b\x4e\x31\x47\xcb\xe5\x61\x49\x18\xee\xe9\x91\xdb\xd3\x8c\x2b\xb7\xb7\x47\x6e\x6f\x8f\x9a\x1e\x1c\x9d\xf2\xb6\xbb\xad\xcb\xdb\xa3\x3f\xd1\xdb\xa3\x6f\xf7\xb6\xb7\xb5\x3f\x64\xb4\x3b\xfb\x47\x11\x96\xbb\xa6\xde\xd5\xf6\x13\x07\x36\x99\x54\x7a\x59\x33\x0e\x7b\x8e\x91\xed\x35\xb2\x75\x81\x94\x27\x84\xf8\x35\x21\x87\x75\xc1\xd7\x5b\xff\x64\x98\x20\xbb\x8c\x48\x24\x22\x88\xff\x44\x51\x55\xb3\x15\x61\xad\x4b\x94\x8a\xd1\x9c\xea\x79\x04\x41\x26\x92\x1c\x7c\x41\x02\x94\xe6\xf7\x19\x73\xb4\xa7\x6c\xdd\x78\xa1\x7a\x79\xf7\x5a\x7f\x99\xfa\xfc\xae\x71\xc3\xd9\x77\xff\x2d\x67\x8a\x6c\x3b\x96\x22\xf2\x42\x5f\xcb\x1e\x7a\x3b\x0c\x31\x15\x18\x10\x85\x7a\x75\x67\x01\xc2\x2f\xff\xfa\x05\xfe\x3e\xff\xdb\xd4\xc8\x25\x9f\xe9\x3d\x50\x26\x15\x92\xf0\x60\xcc\xee\x98\x9f\xbd\xfc\xbe\x91\x37\x2f\x5e\xfe\xfa\x17\xf0\x45\x87\x17\x50\x08\xce\x50\x1f\xc9\x4a\x57\xe8\x74\x81\x27\x22\x28\xf1\x13\xb4\x3f\xc5\x51\xa6\xcc\xaf\x51\xb5\xb4\xd0\xc5\x87\x99\x54\x8e\xfc\xb3\xb7\xba\x6f\x4f\xcf\x7e\xd4\x28\xe1\xc4\xc9\xb5\x15\xdf\x91\x6c\x56\x22\x07\xd8\x94\x7f\x47\xae\x39\x53\x39\xb8\xd5\xf3\xd7\xf7\xe0\x0a\x94\x3c\x13\x01\xba\xd8\x65\xdd\x69\xfe\xeb\xf9\xd9\xff\x03\x00\x00\xff\xff\xaa\xd2\xa9\xbe\x64\x21\x00\x00")

func embeddedrulesRulesPhpBytes() ([]byte, error) {
	return bindataRead(
		_embeddedrulesRulesPhp,
		"embeddedrules/rules.php",
	)
}

func embeddedrulesRulesPhp() (*asset, error) {
	bytes, err := embeddedrulesRulesPhpBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "embeddedrules/rules.php", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"embeddedrules/rules.php": embeddedrulesRulesPhp,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"embeddedrules": {nil, map[string]*bintree{
		"rules.php": {embeddedrulesRulesPhp, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
